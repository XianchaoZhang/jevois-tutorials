/*! \page UserArduinoYOLO JeVois + Arduino：解码物体检测框


\jvversion{1.9.0}

在本教程中，我们对 Arduino 进行编程，以解码 JeVois 模块的结果，该模块检测和识别场景中的多个对象，并发送一条消息，其中包含有关每次检测的边界框、对象类别和识别分数的信息。

具有这些输出的示例模块是 \jvmod{DarknetYOLO}、\jvmod{TensorFlowSaliency}、\jvmod{DetectionDNN} 和 \jvmod{DarknetSaliency}。

本教程直接以您首先学习过的 \ref UserArduinoBlink 为基础。

配置  
----------

- 我们从与 \ref UserArduinoBlink 中相同的 Arduino 开发板和硬件连接开始

- 这些模块输出的消息格式在 \ref UserSerialStyle 中进行了描述，位于 <b>Object detection + recognition messages</b> 部分，该部分本身引用了 <b>Two-dimensional (2D) location messages</b> 部分。实际上，这些消息描述了对象的边界框（2D 位置消息），并在 2D 位置消息的 \a id 和 \a extra 字段中提供了有关对象类别和识别分数的信息。

- 为了了解这些消息，让我们启动 JeVois Inventor 并启动 \jvmod{DarknetYOLO} 。在 Inventor 的 \b Console 选项卡中，我们打开串行消息到 \b USB 和 \b 4 针，并选择消息详细级别 \b Normal ，这样我们就可以获取有关每个边界框及其得分最高的对象类别的一些信息：

\image html arduyolo.png

- 在上面的例子中，我们在每个视频帧上检测一只狗、一辆自行车和一辆汽车。因此，JeVois 在每一帧上发送 3 条 \b N2 类型的消息。请注意，这里我们不知道哪条消息来自哪一帧。如果您需要知道，请查看 \ref UserSerialStyle 并查找参数 \p serstamp ，该参数可以设置为在每个串行消息前面添加一个帧号。我们不会在这里使用它。

- 消息如下（来自 \ref UserSerialStyle ）：

\verbatim
N2 category:score left top width height
\endverbatim

- 请注意，坐标采用 \ref coordhelpers 中描述的 JeVois 标准坐标系，其中：
  + 相机视野中心位于 x=0、y=0
  + 相机图像左边缘始终位于 x=-1000
  + 相机图像右边缘始终位于 x=1000
  + 相机图像上边缘通常位于 y=-750（除非相机图像宽高比不是 4:3）
  + 相机图像下边缘通常位于 y=750

这样，JeVois 报告的检测结果就与 JeVois 抓取帧的相机分辨率无关（例如 320x240 或 640x480）。

- 请注意，默认情况下，标准化消息的浮点精度为小数点后零位，即我们得到整数分数和坐标。如果使用 \ref UserSerialStyle 中描述的参数 \p serprec 进行更改，则可以获得更精确的浮点值（例如，在 JeVois Inventor 的控制台中尝试 `setpar serprec 3`）。对于下面的代码，我们将假设浮点值也可以是整数。

编写代码 
----------------

我们将使用 <b>state machine</b> 方法，就像 \ref UserArduinoBlink 中一样，现在它具有更多状态，因为我们总共需要为每条消息解码 6 个标记。

为了开发一个非平凡的例子，假设当我们检测到<b>至少有 200 个单位宽的狗</b>时，我们想要打开 Arduino 的 LED（即，狗周围的边界框应该至少和视野的 1/10 一样宽，并且整个视野是 2000 个标准单位宽，如上所述）。

我们扩展了在 \ref UserArduinoBlink 中开发的状态机代码如下：

\includelineno arduyolo.C

几点说明：

- 1-36 行：准备工作与 \ref UserArduinoBlink 相同，但我们将类别名称更改为 \b dog （第 15 行），并将 \b MIN_WIDTH 定义为所需的最小对象宽度（第 18 行）。

- 第 39-47 行：我们决定状态机的各种状态。

- 第 52 行：现在我们在 \ref UserArduinoBlink 中查找 \b N2 而不是 \b DO

- 第 76-98 行：我们一次解码左、上、宽和高。请注意，这些可能是浮点数，具体取决于 \p serprec ，因此我们使用 `atof()` 来解码它们。

- 第 111 行：我们仅检查我们是否处于状态 6（完成解码并且类别匹配）以及宽度是否足够大；如果是，则打开 LED，否则将其关闭。

编译代码并将代码上传至您的 Arduino，就可以了！

\image html arduyolodog.jpg

哇喔，当 JeVois 检测到足够大的狗时，LED 就会亮起！

请注意，在 JeVois 还检测到其他物体的场景中，所编写的代码将关闭 LED。因此，如果在检测到狗之后检测到其他物体（例如，上述场景中的自行车），LED 可能只会短暂闪烁。

进一步 
-------------

查看其他教程。它们使用类似的状态机解码：

- \ref ArduinoTutorial
- \ref UserPanTilt
- \ref UserRobotCar

*/

