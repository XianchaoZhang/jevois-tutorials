/*! \page ProgrammerPythonSaveImages 使用 Python 将相机图像保存到 microSD

在本教程中，我们编写了一个非常简单的模块，仅将 JeVois 相机传感器捕获的图像保存到 JeVois 内部的 microSD 卡中。这很有用，例如，在开发新的机器视觉算法时收集训练数据。如您所见，这只需几分钟即可实现。

对于本教程，您不需要安装任何软件（如果您还没有，则视频捕获程序除外）：我们将直接在 JeVois 内部的 microSD 卡上编辑 Python 代码。

准备工作 
-------------

- 从 [JeVois start](http://jevois.org/start) 获取最新的 microSD 映像，因为本教程假设 \jvversion{1.5} 或更高版本。
- 查看 \ref UserTutorials ，了解如何：
  + 将最新的 microSD 映像刷入物理卡
  + 将 JeVois 连接到主机并启动
  + 从 JeVois 抓取视频并选择不同的分辨率
  + 使用串行 USB 链接与 JeVois 通信，并使用 JeVois 命令行界面
- 请务必阅读 \ref Programmer 以了解基本概念。
- 阅读 \ref ProgrammerPython
- 最后查看 \ref ModulePythonTutorial

在这里，我们将重点介绍如何完成所有这些工作的逐步说明。

Getting started
---------------

- 将 JeVois 连接到您的主机，其中包含最新的 microSD 映像

- 在本教程中，我们将：
  + 如果您在主机上使用视频捕获软件，则停止抓取视频
  + 指示 JeVois 将其 microSD 卡导出为虚拟 USB 驱动器
  + 浏览主机上的虚拟 USB 驱动器
  + 使用文本编辑器在该 USB 驱动器上创建一个新的 Python 模块
  + 弹出虚拟 USB 驱动器。弹出后，JeVois 将重新启动
  + 当它重新上线时，连接到 JeVois，加载新模块，并开始将图像保存到 microSD
  + 停止保存并再次将 microSD 导出为虚拟闪存驱动器
  + 获取已保存的图像。

- 下面我们一步步介绍这些步骤。

停止抓取视频 
-------------------

将 JeVois 内部的 microSD 导出为虚拟 USB 闪存驱动器会导致主机和 JeVois 相机之间出现潜在的数据一致性问题，因此 JeVois 目前要求在通过 USB 访问其 microSD 期间不加载任何机器视觉模块并且不传输视频。

因此，在尝试通过 USB 导出 JeVois 的 microSD 之前，请关闭任何视频捕获程序。

指示 JeVois 将其 microSD 卡导出为虚拟 USB 驱动器 
-----------------------------------------------------------------

要导出 JeVois 中的 microSD，请通过串行链路向 JeVois 发送命令 \c usbsd 。您可以先使用串行终端连接到 JeVois，然后输入此命令。例如，使用 Arduino IDE 进行连接，如 \ref UserArduinoIDE 中所述。

在这里，由于我们只想向 JeVois 发出一个命令，我们也可以改为执行以下操作：
- Linux：在 Linux 终端中，键入：
  + `jevois-usbsd start`（导出它），
  + `jevois-usbsd stop`（弹出并重新启动 JeVois）。
- Mac OSX：`echo usbsd > /dev/cu.usbmodem*`
- Windows：FIXME 有人可以贡献一个简短的命令吗？现在只需使用串行终端，如 Termite、Arduino IDE 等。

在主机上浏览虚拟 USB 驱动器 
-------------------------------------------------

这是 JeVois 内部的 microSD 导出到 Mac 主机时的样子：

\image html PythonSandbox2.png

使用文本编辑器在该 USB 驱动器上创建一个新的 Python 模块 
----------------------------------------------------------------

创建新模块的约定如下：

- 创建目录 <b>JEVOIS:/modules/Vendor/ModuleName</b>，其中
  + \a Vendor 是供应商名称，用于将由同一个人或组织编写的模块分组在一起
  + \a ModuleName 是模块的名称

在这里，让我们创建一个新目录 <b>JEVOIS:/modules/Test/SaveImages/</b>

- 然后创建一个源代码文件，该文件的文件主干与模块的目录名相同，并在其中创建一个具有相同名称的类。对于用 python 编写的模块，我们使用任何文本编辑器创建一个新文件 <b>JEVOIS:/modules/Test/SaveImages/SaveImages.py</b>。

- 正如 \ref ProgrammerPython 和 \ref ModulePythonTutorial 中所述，这里我们只需要实现一个名为 \b SaveImages 的 Python 类，其中有一个名为 `processNoUSB()` 的函数，它将从相机传感器接收下一个图像并将其写入磁盘，同时不通过 USB 输出视频流（因此相机可以在没有主机的情况下以独立模式工作）。

- 编写模块：

\code{.py}
import libjevois as jevois
import cv2
import numpy as np

class SaveImages:
    # ###################################################################################################
    ## Constructor
    def __init__(self):
        self.frame = 0
        
    # ###################################################################################################
    ## Process function with no USB output
    def processNoUSB(self, inframe):
        img = inframe.getCvBGR()
        cv2.imwrite("/jevois/data/saveimages{}.png".format(self.frame), img)
        self.frame += 1
\endcode

也就是说，我们从相机获取帧作为具有 BGR 像素的 OpenCV 图像，然后使用 OpenCV 函数 `imwrite()` 将其作为 PNG 文件保存到磁盘。我们使用 <b>self.frame</b> 作为计数器，为每个新图像赋予一个新名称。

\note 此模块不输出任何视频，它只捕获帧并将其保存到 microSD，没有任何内容可显示。请查看其他 Python 教程，了解也通过 USB 输出视频帧的模块。

弹出虚拟 USB 闪存驱动器 
---------------------------------

要停止导出 JeVois 中的 microSD，只需正确弹出该驱动器：
- Linux：右键单击其图标并选择 \b eject
- Mac OSX：将驱动器的图标拖到桌面上的垃圾箱
- Windows：安全移除 USB 驱动器。

弹出驱动器后，JeVois 将重新启动。您将看到其 LED 闪烁。


连接到 JeVois，加载新模块，然后开始将图像保存到 microSD 
---------------------------------------------------------------------------

一旦 JeVois 重新上线，就连接到它，例如使用 Arduino IDE，如在 \ref UserArduinoIDE 中所做的那样。

要加载模块，我们将使用 `setmapping2` JeVois 命令（参见 \ref UserCli ）：

\verbatim
setmapping2 YUYV 320 240 30.0 Test SaveImages
\endverbatim

您可以选择 JeVois 摄像头传感器支持的任何分辨率像素格式（此处为 YUYV）、分辨率（此处为 320x240 像素）和帧速率（此处为 30.0）（有关更多信息，请参阅 \ref PixelFormats 和 \ref VideoMapping ），即：

- 像素格式：BAYER、YUYV、RGB565
- 分辨率和帧速率：
  + SXGA (1280 x 1024): up to 15 fps
  + VGA (640 x 480): up to 30 fps
  + CIF (352 x 288): up to 60 fps
  + QVGA (320 x 240): up to 60 fps
  + QCIF (176 x 144): up to 120 fps
  + QQVGA (160 x 120): up to 60 fps
  + QQCIF (88 x 72): up to 120 fps


最后，要开始保存帧，我们需要发出：

\verbatim
streamon
\endverbatim

它指示摄像头传感器开始流式传输视频，之后捕获的视频帧将被发送到我们模块的 `processNoUSB()` 函数。

\note 因为这个例子非常简单，所以它不进行任何缓冲。如果您的图像需要很长时间才能压缩为 PNG，或者您的 microSD 速度很慢，您可能无法维持所需的帧速率。当您的 `processNoUSB()` 函数仍在前一帧上运行时，从相机传感器接收到的任何额外帧都将被安全丢弃。您可能还想查看 \jvmod{SaveVideo} 模块，它可以使用更复杂的多线程缓冲设置保存视频。

停止保存并再次将 microSD 导出为虚拟闪存驱动器 
-----------------------------------------------------------------

保存完图像后，发出

\verbatim
streamoff
\endverbatim

要再次将 microSD 导出为闪存驱动器，请发出

\verbatim
usbsd
\endverbatim

现在浏览 <b>JEVOIS:/data/</b> 查找名为 \a saveimagesXXX.png 的文件并尽情享受吧！您可以将这些文件复制到主机，查看它们、删除它们等，就像使用常规 USB 闪存驱动器一样。

\image html SaveImages.png

自主运行 
--------------------

可以将 JeVois 配置为在打开电源后立即自动开始捕获和保存图像。为此，请编辑文件 <b>JEVOIS:/config/initscript.cfg</b>，并将我们上面手动输入的命令添加到该文件中：

\verbatim
setmapping2 YUYV 320 240 30.0 Test SaveImages
streamon
\endverbatim

<b>initscript.cfg</b> 会在相机启动时自动执行。您只需使用 USB 电池组为 JeVois 供电，然后让它在开机时保存图片即可。

\note 类似地，使用此类设置时，您也希望在完成后关闭电源。这可能会导致保存的最后或最后几帧损坏，因为这些帧可能仍在磁盘缓存中，并且在您断电时正在写入 microSD。这还可能损坏 microSD 上的整个文件系统，尽管 JeVois 在从突然断电中恢复方面非常强大。只需让相机保持开启状态的时间比您预期的要长一点，即可获得可用数据，这样即使最后几帧被损坏，它们也不会那么重要。

*/

