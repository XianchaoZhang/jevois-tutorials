/*! \page UserHeadless 使用 JeVois Inventor 进行无头操作（无视频到 USB）

\jvversion{1.10.0}

本教程将向您介绍如何配置 JeVois 智能相机以实现独立、无头操作。在此模式下，JeVois 不需要主机。它可以运行机器视觉算法，并且不会生成任何要通过 USB 链路发送的视频。它仍然可以发送文本消息，无论是发送到硬件 4 针串行端口，还是发送到串行 USB 端口。

理论  
------

JeVois 支持两种基本操作模式：

- <b>通过 USB 视频输出：</b>当连接到主​​机时，JeVois 将抓取视频帧、处理帧、生成显示处理结果的新帧，并将这些新帧发送到通过 USB 连接的笔记本电脑或台式电脑。大多数与 JeVois 捆绑的模块都支持这种操作模式，向您展示模块正在做什么。

- <b>无视频输出至 USB（无头）：</b>当没有连接主机时，JeVois 仍然可以抓取和处理视频帧，然后发送有关其检测到的内容的文本消息。没有人类操作员的自主机器人通常会使用这种操作模式。

更多详细信息，请参阅 \ref Concepts

请注意，并非所有机器视觉模块都支持这两种操作模式。这取决于模块的程序员。要查看是否支持无头操作，请参阅每个模块的文档页面，方法是单击 UserDemos 列表中的相应模块。在模块文档的顶部，会显示它是否支持通过 USB 进行带视频和不带视频的操作（视频映射）。

当 JeVois 连接到主机时，主机会控制 JeVois 的操作，因为主机会以给定的分辨率和帧速率请求视频。当没有连接主机时，我们需要指示 JeVois 做什么。这是通过 \b initscript.cfg 实现的，它是 JeVois 启动时运行的脚本。在该脚本中，我们可以编写命令来告诉 JeVois 使用哪个无头机器视觉处理模块。

实现
--------------

要启用无头操作，您至少需要 \b initscript.cfg 中的两个命令：

- `setmapping2` 命令来选择运行哪个机器视觉模块。

- `streamon` 命令用于启动摄像机视频流。

从 \jvversion{1.10} 和 JeVois Inventor \b 0.3 开始，您可以使用 JeVois Inventor 轻松实现这一点。

假设我们想要一个自主机器人检测 ArUco 标记并朝它们行驶（如 \ref UserRobotCar 中所示）。我们将使用 JeVois 模块 \jvmod{DemoArUco}，它支持有和没有 USB 视频输出的操作。

在 JeVois Inventor 中，在 \b Config 选项卡下，我们选择文件 <b>JeVois initscript.cfg</b>，它将启动 JeVois 内部 microSD 卡上配置文件 <b>JEVOIS:/config/initscript.cfg</b> 的编辑器。

我们输入以下几行：
\verbatim
setmapping2 YUYV 640 480 30.0 JeVois DemoArUco
setpar serout USB
streamon
\endverbatim

`setmapping2` 选择相机像素格式 (YUYV)、分辨率 (640x480) 和帧速率 (30.0fps)，以及来自供应商 \b JeVois 的机器视觉模块 \b DemoArUco 。`setmapping2` 的规范为：
\verbatim
setmapping2 <pixelformat> <width> <height> <fps> <Vendor> <Module>
\endverbatim

有关更多详细信息，请参阅 \ref UserCli 。您应该确保模块支持您选择的像素格式、分辨率和 fps。通常，模块文档页面中提供的示例视频映射列表是最好的开始方式。例如，对于 \jvmod{DemoArUco}，我们看到它支持：

\verbatim
Video Mapping:   NONE 0 0 0 YUYV 320 240 30.0 JeVois DemoArUco
Video Mapping:   YUYV 320 260 30.0 YUYV 320 240 30.0 JeVois DemoArUco
Video Mapping:   YUYV 640 500 20.0 YUYV 640 480 20.0 JeVois DemoArUco
\endverbatim


请记住，视频映射首先要指定输出格式（将视频流式传输到 USB 时），然后指定相机传感器格式。有关详细信息，请参阅 \ref VideoMapping 。在这里，查看上述 3 个条目的<b>后半部分</b>，看起来在 YUYV 中以 320x240 或 640x480 运行相机传感器应该可以正常工作，如果它可以在有视频输出的情况下达到 20fps，我们将尝试在没有视频输出的情况下达到 30fps（无视频输出通常运行得更快，因为不需要构建输出图像并通过 USB 发送它）。

`streamon` 命令实际上将启动视频流。别忘了它！我们不会在执行 `setmapping2` 时自动启动流，以允许用户在加载机器视觉模块之后和开始运行之前设置其参数。例如，在这里，我们决定将有关检测到的标记的文本消息发送到 serial-over-USB（命令 `setpar serout USB`）。

在我们保存文件（这将重新启动 JeVois）之前，最好将 JeVois 指向 ArUco，从 <b>Vision Module</b> 菜单中选择 \jvmod{DemoArUco} 模块，并确认检测到了 arUco。一旦我们进入无头模式，假设我们没有移动相机，ArUco 应该仍然会被检测到，我们应该在 Inventor 的 Console 选项卡中看到它。

\jvimg{headless1.png, 50%}

单击<b>保存到 JeVois</b>，JeVois 将重新启动。

当重新启动时，它仍会显示默认模块 \jvmod{DemoSaliency}：

\jvimg{headless2.png, 50%}

发生了什么？事实上，我们的无头 \jvmod{DemoArUco} 模块确实加载并以无头模式启动，但随后 Inventor 检测到 JeVois 已连接到主机，并决定接管并运行 \jvmod{DemoSaliency}，视频输出到 USB。因此，我们需要告诉 Inventor 在 JeVois 连接后不要向 JeVois 请求视频。为此，我们转到 \b System 选项卡并单击 <b>Go Headless</b> 按钮。这将关闭 Inventor 的视频捕获组件。因此，下次检测到 JeVois 时，Inventor 将不会向其请求任何视频。

\jvimg{headless3.png, 50%}

单击 <b>Go Headless</b> 按钮后，JeVois 会再次重新启动，并在启动时运行其 \b initscript.cfg ，以无头模式加载并启动 \jvmod{DemoArUco}。

\jvimg{headless4.png, 50%}

通过切换到 \b Console 视图，我们确认我们的 ArUco 标记已被检测到（这里我们还将序列样式更改为 \b Detail 以获取 ArUco 符号编号，这里是 U48）：

\jvimg{headless5.png, 50%}

要切换回正常操作，您需要退出并重新启动 Inventor，一旦它变为无头状态，就无法再返回抓取视频（我们认为这是 Qt（我们用来开发 Inventor 的图形小部件工具包）中的一个错误）。

如果您不再需要无头操作，您还应该删除我们添加到 \b initscript.cfg 的行，以避免在 JeVois 启动时浪费时间。

进一步 
-------------

- 如果您想通过 JeVois 的 4 针串行端口向 Arduino 发送消息，则应在 \b initscript.cfg 中使用 `setpar serout Hard`

- 查看 \ref UserPanTilt 和 \ref UserRobotCar 了解无头操作的更多复杂示例。

*/

