/*! \page UserArUcoCalib 为 ArUco 和其他 OpenCV 模块校准你的相机

相机校准包括确定光学元件和传感器的基本参数。一旦实现精确校准，\jvmod{DemoArUco}、\jvmod{FirstVision}、\jvmod{FirstPython} 和 \jvmod{PythonObject6D} 等模块就可以恢复标记或物体在 3D 空间中的准确位置和方向。

JeVois 包含一组用于标准传感器和光学器件的默认校准文件。

如果出现以下情况，您应该考虑进行校准：
- 您需要非常精确的姿势估计
- 您在 JeVois 相机中安装了不同的传感器
- 您已将镜头更改为不同的镜头（例如，90 度视野）
- 您已调整镜头

请注意，校准取决于图像分辨率。因此，对于您打算使用的每种视频分辨率，都应重复此处描述的过程。

\note 从 \jvversion{1.12.0} 开始，您可以使用新模块 \jvmod{CalibrateCamera} 校准您的相机，从而无需执行下面更为繁琐的步骤。

创建虚拟机 
----------------------------

从全新的 Ubuntu 18.04 virtualbox 开始。

按照 http://jevois.org/doc/Virtualbox.html 上的说明进行操作，但要使用 Ubuntu 18.04。注意：使用更高版本的 Ubuntu 编译 ARtoolkit 可能会遇到问题。

确保重新启动主机并安装 USB 设备过滤器。连接 JeVois 相机后，您应该可以在“guvcview”中看到视频。

编译校准程序 
----------------------------------

我们将在虚拟机中本地编译 OpenCV 校准代码。

我们遵循 http://jevois.org/basedoc/ArUco_8H_source.html 上的说明，但我们只使用 Ubuntu 自带的默认 OpenCV，而不是使用 JeVois OpenCV。

\code{.py}
sudo apt install libopencv-dev build-essential g++
dpkg --list | grep opencv # check installed opencv version: should be 3.2.0

# Get this version of opencv-contrib:
git clone https://github.com/opencv/opencv_contrib.git
cd opencv_contrib
git checkout 3.2.0
cd modules/aruco/samples

g++ create_board_charuco.cpp -o create_board_charuco -lopencv_core -lopencv_imgcodecs -lopencv_highgui -lopencv_aruco -lopencv_imgproc -lopencv_videoio

g++ calibrate_camera_charuco.cpp -o calibrate_camera_charuco -lopencv_core -lopencv_imgcodecs -lopencv_highgui -lopencv_aruco -lopencv_imgproc -lopencv_videoio

\endcode


我们将要使用的程序现在应该在 `bin/calib_camera` 中准备好了

准备您的 JeVois 相机 
----------------------------

相机校准只会从相机中选择默认的视频模式。

为确保选择了特定分辨率，请在 JeVois 相机上编辑 \b videomappings.cfg 以仅使用一种模式。例如，使用 JeVois Inventor，转到 Config 选项卡并选择 \b videomappings.cfg ，然后选择全部 (CTRL-A) 并删除 (DEL)，最后只添加一个直通模式。例如，要使用可选的 2MP OV2640 传感器在 1280x720 下校准经过修改的 JeVois 相机：


\verbatim
YUYV 1280 720 10.0 YUYV 1280 720 10.0 JeVois PassThrough
\endverbatim

保存到 JeVois（CTRL-S）并确认 JeVois 重新启动后您就可以看到视频。

在另一台运行 JeVois Inventor 的机器上执行此操作（或先退出虚拟机并运行 JeVois Inventor）。


打印校准图案 
--------------------------------

现在回到我们的 VirtualBox，首先创建一个 ArUco 标记数组（所谓的 ChArUco）：

\code{.py}
./create_board_charuco -d=0 -h=5 -w=8 --ml=200 --sl=350 charuco.png
\endcode

然后打印它（您可能必须先使用 `scp`，`ftp` 或其他方式将文件从您的虚拟机发送到具有打印机的计算机 - 或者直接从 http://jevois.org/data/charuco.png 获取它），测量标记大小和间距大小（以您想要的任何单位，这里我们使用米，只要确保您稍后在 \jvmod{DemoArUco} 和其他中指定标记大小时使用相同的单位即可）。

\jvimg{charuco-measure.png, 30%}

运行校准程序 
-------------------------------

最后，从中得出相机参数（将 `--ml` 和 `--sl` 参数设置为您在印刷板上测量的值；下面是我们在 US Letter 纸上打印 5x8 Charuco 板并自动缩放/旋转以适合纸张后测量的值）：

\code{.py}
./calibrate_camera_charuco -d=0 -h=5 -w=8 --ml=.0172 --sl=.0303 --rs --sc calibration.yaml
\endcode

\jvimg{calib_ArUco.png, 30%}

\note 在我们的测试中，此程序无法以 5fps 的速度捕获 1600x1200。只需将您的映射声明为 1600x1200 15fps，它就可以正常工作，尽管由于 USB 带宽限制，它实际上将以 5fps 的速度进行流式传输。

- 您应该瞄准您的相机以便检测到所有的 ArUco 标记。

- 按 'c' 捕获当前图像并将其添加到校准池中。

- 为了获得良好的相机校准效果，重要的是从各种角度获取校准板与相机镜头的图像。请注意，这需要将校准板以不同的角度相对于相机握住，包括倒置。尝试获取至少 10 个非常不同的视点。

- 捕获所有校准图像后，按 ESC 键，将计算与相机设备相关的校准数据。表格化的校准数据将写入命令行窗口的标准输出并保存到磁盘。

将文件复制到 JeVois 
--------------------------- 

将校准文件复制到相机上的 <b>JEVOIS:/share/camera/</b>，并将其命名为：<b>calibration1280x720.yaml</b>（适用于 1280x720 分辨率），或者更改名称以适应不同的分辨率。

下次使用该分辨率运行 \jvmod{DemoArUco} 时，它将加载校准文件。

*/

