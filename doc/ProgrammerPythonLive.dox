/*! \page ProgrammerPythonLive 使用 Python 编程实时 JeVois 相机


在本教程中，我们修改了一些现有的用 Python 编写的沙盒机器视觉模块，这些模块已预装在标准 JeVois microSD 映像上。我们通过 USB 连接实时访问 JeVois 内的 microSD 来实现这一点。

对于本教程，您不需要安装任何软件（如果您还没有，则视频捕获程序除外）：我们将直接在 JeVois 内部的 microSD 卡上编辑 Python 代码。

准备工作 
-------------

- 从 [JeVois start](http://jevois.org/start) 获取最新的 microSD 映像
- 查看 \ref UserTutorials ，了解如何：
  + 将最新的 microSD 映像刷入物理卡
  + 将 JeVois 连接到主机并启动
  + 从 JeVois 抓取视频并选择不同的分辨率
  + 使用串行 USB 链接与 JeVois 通信，并使用 JeVois 命令行界面
- 请务必阅读 \ref Programmer 以了解基本概念。
- 阅读 \ref ProgrammerPython
- 最后查看 \ref ModulePythonTutorial

在这里，我们将重点介绍如何完成所有这些工作的逐步说明。

Getting started
---------------

- 将 JeVois 连接到您的主机，其中包含最新的 microSD 映像

- 启动视频抓取器并选择分辨率 <b>YUYV 352x288 \@ 30fps</b>，这将启动 \ref PythonSandbox 模块。默认情况下，此模块计算输入视频图像的拉普拉斯算子并将结果传输到 USB。它与 \ref ModulePythonTutorial 中介绍的沙盒模块几乎完全相同。您应该看到类似这样的内容：
  \image html PythonSandbox1.png

- JeVois 上实时编辑机器视觉模块的基本工作流程如下：
  + 停止抓取视频
  + 指示 JeVois 将其 microSD 卡导出为虚拟 USB 驱动器
  + 在主机上浏览虚拟 USB 驱动器
  + 使用文本编辑器打开该 USB 驱动器上的 Python 源代码
  + 修改代码并保存
  + 弹出虚拟 USB 驱动器。弹出后，JeVois 将重新启动，当它重新上线时，我们可以通过再次启动视频捕获软件来检查编辑结果。

- 让我们开始吧！首先，退出视频捕获软件。这是必要的，因为在视频流式传输时，JeVois 将拒绝将其 microSD 导出为虚拟 USB 驱动器。原因是 JeVois CPU 和主机同时访问该驱动器会带来数据一致性和缓存问题。因此，我们在通过 USB 导出 microSD 之前关闭 JeVois 上的所有机器视觉模块。

- 我们需要通过串行链路向 JeVois 发送命令 \c usbsd ，让它知道我们想要通过 USB 导出 microSD。您可以先使用串行终端连接到 JeVois，然后输入此命令。例如，使用 Arduino IDE 进行连接，如 \ref UserArduinoIDE 中所述。

  在这里，因为我们只想向 JeVois 发出一个命令，所以我们可以这样做：

  + Linux： `sudo sh -c 'echo usbsd > /dev/ttyACM0'`  或者，使用 \jvversion{1.3} 或更高版本，您可以直接在主机上的 Linux 终端中输入（而不是在串行通信软件中）：
    - `jevois-usbsd start`（导出它），
    - `jevois-usbsd stop`（弹出并重新启动 JeVois）。
  + Mac OSX：`echo usbsd > /dev/cu.usbmodem*`
  + Windows：FIXME 有人可以贡献一个简短的命令吗？现在只需使用串行终端，如 Termite、Ardiuno IDE 等。

  以下是 Mac 上的结果：
  \image html PythonSandbox2.png

- 在 <b>JEVOIS:/modules/JeVois/PythonSandbox</b> 下找到 \b PythonSandbox.py 并打开它（在我的 Mac 上，双击即可在 Emacs 中打开它）。

- 让我们编辑计算拉普拉斯算子的关键行（第 59 行）。让我们将 \b ksize 参数稍微更改为 3：
  \verbatim
        outimg = cv2.Laplacian(inimg, -1, ksize=3, scale=0.25, delta=127)
  \endverbatim
  并保存文件。

- 正确弹出 JEVOIS 驱动器（拖到废纸篓、单击弹出按钮等）并观察相机上的 LED：
  + Blinks off - 关机完成，正在重新启动
  + 常亮绿色 - 开始重新启动
  + 橙色闪烁 - 检测到相机传感器
  + 常亮橙色 - 准备就绪

- JeVois 准备就绪后，再次启动视频捕获软件，并观察结果：
  \image html PythonSandbox3.png 
  与模块以前的操作相比，存在细微但明显的差异。

- 让我们计算一些除拉普拉斯算子之外的东西。退出视频捕获程序，发出 \c usbsd 命令，编辑文件，然后更改第 59 行以实现颜色对象跟踪器（颜色阈值），如以下网址所述：http://docs.opencv.org/trunk/df/d9d/tutorial_py_colorspaces.html

  \code{.py}
    # Convert BGR to HSV
    hsv = cv2.cvtColor(inimg, cv2.COLOR_BGR2HSV)
    
    # define range of blue color in HSV
    lower_blue = np.array([80,50,50])
    upper_blue = np.array([150,255,255])
    
    # Threshold the HSV image to get only blue colors
    mask = cv2.inRange(hsv, lower_blue, upper_blue)
    
    # Bitwise-AND mask and original image
    outimg = cv2.bitwise_and(inimg, inimg, mask= mask)
  \endcode
  确保您的缩进正确，因为 Python 对此很挑剔。您粘贴到旧第 59 行的行应与上下两行的缩进量相同。

  结果如下（你需要向 JeVois 显示一个蓝色物体，这里我们显示了我们最喜欢的 USB 闪存驱动器）：
  \image html PythonSandbox4.png 
  现在我们有了一些开始类似于 \ref UserColorTracking 的基本颜色跟踪器的东西，只需几行 Python 代码。

错误 
------

与往常一样，您可以使用串行 USB 端口连接到 JeVois 并发出 `setpar serlog USB` 以查看代码有错误时可能出现的任何错误消息。

此外，我们努力添加了一个新功能，可直接在视频流中显示这些错误。例如，在第 59 行插入行：
\verbatim
      boo
\endverbatim
say, at line 59. 然后尝试从 JeVois 捕获视频，您应该会看到：

\image html PythonSandbox5.png



*/

