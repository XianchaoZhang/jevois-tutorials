/*! \page ProgrammerDlib 创建具有依赖项的模块：Dlib 人脸检测器

本教程介绍创建具有一些外部依赖项的 C++ JeVois 模块的步骤——这里是优秀的 Dlib C++11 机器视觉算法库。

配置  
----------

- 首先按照 \ref ProgrammerSetup 中列出的步骤进行操作

- 由于我们只想编译一个新模块，因此我们不需要重新编译 \b jevois 和 \b jevoisbase ，我们只需使用 JeVois Ubuntu 软件包提供的预编译版本。因此，我们只需要：
  + 使用 http://jevois.usc.edu 上的说明安装 Ubuntu 软件包 \b jevois-sdk-dev
  + 使用 \b jevois-sdk-dev 提供的脚本 `jevois-create-module` 从头开始创建一个新模块。
  + 使用模块目录中的 `rebuild-host.sh` and `rebuild-platform.sh` 脚本编译模块。

创建模块
-------------------

我们使用脚本 `jevois-create-module`，它将从 GitHub 获取示例模块代码，并且还将立即更改类和文件的名称以匹配我们新模块的名称：用法是 `jevois-create-module <VendorName> <ModuleName>`，所以这里我们只需运行：

\verbatim
cd
jevois-create-module Tutorial FaceDetector
\endverbatim

您现在应该有以下内容：
\verbatim
facedetector/
├── CMakeLists.txt
├── COPYING
├── INSTALL
├── README
├── rebuild-host.sh
├── rebuild-platform.sh
├── share
│   └── README.txt
└── src
    └── Modules
        └── FaceDetector
            ├── FaceDetector.C
            ├── icon.png
            ├── postinstall
            └── screenshot1.png
\endverbatim


拉取依赖项 
----------------------

让我们编写一个小的 shell 脚本来获取 Dlib，以便其他人在想要编译我们的模块时可以使用该脚本。我们创建 <b>facedetector/download-dlib.sh</b>，如下所示：

\code{.py}
#!/bin/bash
# Download and extract dlib:

ver=19.15

if [ -d dlib ]; then
    echo "dlib/ directory already present! Delete it if you want to reinstall -- SKIPPING DLIB DOWNLOAD"
    exit 0
fi

wget http://dlib.net/files/dlib-${ver}.tar.bz2
tar jxvf dlib-${ver}.tar.bz2
/bin/rm dlib-${ver}.tar.bz2
mv dlib-${ver} dlib
\endcode


该脚本将下载给定版本的 Dlib、解压并安装到 <b>facedetector/dlib/</b>。

下载修复版本通常比下载最新版本更好，因为最新版本的更改可能会导致与我们的模块不兼容，这会让未来的用户感到困惑。当 Dlib 的新版本可用时，我们将下载它，使用我们的模块进行测试，进行任何调整，并更新此下载脚本。

通过调用以下命令从目录 \b facedetector 内部运行脚本：

\code{.py}
cd facedetector
./download-dlib.sh
\endcode

为了确保 Dlib 被自动拉取和安装，我们在 \b rebuild-host.sh 和 \b rebuild-platform.sh 中的某个地方添加了以下行，位于调用 \b make 命令之前：

\code{.py}
# Get dlib if not here:
if [ ! -d dlib ]; then ./download-dlib.sh; fi
\endcode


编译依赖项 
------------------------

我们现在转向依赖项的文档，尝试了解应如何编译它。

我们在 http://dlib.net/compile.html 上找到了两个选项
- 使用 CMake，将 Dlib 编译为子项目
- 直接从命令行进行，无需 cmake

尝试了第一个选项后，我们无法让它工作。但第二个选项工作得很好。我们只需将 <b>dlib/all/source.cpp</b> 添加为需要编译到我们模块中的新 C++ 文件。我们还将 \b dlib 添加到我们的包含路径中，最后，在阅读 http://dlib.net/compile.html 直到最后之后，我们添加了标志 \b DLIB_NO_GUI_SUPPORT，因为 JeVois 没有显示。我们最终为我们的模块得到了以下修改后的 \b CMakeLists.txt：

\code{.py}
cmake_minimum_required(VERSION 3.1)

## 设置供应商名称，我们的模块将放置在 /jevois/modules 下该名称的目录中：
set(JEVOIS_VENDOR "Tutorial")
set(JEVOIS_CONFIG "/jevois/config" CACHE STRING "Path to JeVois config to use")

## 从 JeVois 安装中包含辅助函数、配置等：
set(CMAKE_MODULE_PATH ${JEVOIS_CONFIG})
include(jevois_config)
include(JeVois)

## 设置项目名称，检测编译器（已由我们的辅助模块设置）。然后设置一些编译标志：
project(facedetector)
jevois_project_set_flags()
include_directories(${CMAKE_CURRENT_SOURCE_DIR})

## 设置 src/Modules 中的模块：
jevois_setup_modules(src/Modules "")

## 在 Dlib 中禁用 GUI 支持：
add_definitions("-DDLIB_NO_GUI_SUPPORT")

## Include dlib include files:
include_directories("dlib")

## 添加 dlib 源文件 (see http://dlib.net/compile.html):
target_sources(FaceDetector PRIVATE dlib/dlib/all/source.cpp)

## 为我们的模块添加任何链接库：
target_link_libraries(FaceDetector ${JEVOIS_OPENCV_LIBS} opencv_imgproc opencv_core)

## 在 share/ 子目录中安装任何共享资源（级联分类器、神经网络权重等）：
install(DIRECTORY "${CMAKE_CURRENT_SOURCE_DIR}/share"
  DESTINATION "${JEVOIS_INSTALL_ROOT}" COMPONENT bin)

## Wrapping up:
jevois_project_finalize()  # 在您的 CMakeLists.txt 中最后调用此函数，如果适用，将卸载实时 microSD
\endcode

\note 查看 \b jevoisbase 的 \b CMakeLists.txt ，可在 https://github.com/jevois/jevoisbase/blob/master/CMakeLists.txt 上找到 - 它包含许多有关如何将不同类型的 C++ 和 C 依赖项导入 JeVois 模块的示例。通常，我们最终会使用以下 CMake 命令：
- `include_directories()` 添加包含包含文件的目录。
- `target_sources()` 添加应编译的源文件。对于具有大量源文件的复杂依赖项，我们通常使用 shell 命令列出它们，例如，请参阅 \b jevoisbase 的 \b CMakelists.txt 中的 ARToolkit 或 TensorFlow 部分。
- `target_link_libraries()` 添加模块应链接到的库。
- `add_definitions()` 如果您需要为依赖项设置编译器标志。

编写模块 
------------------

我们现在准备编写模块了。

我们编辑 <b>facedetector/src/Modules/FaceDetector.C</b> 以包含 http://dlib.net/face_detection_ex.cpp.html 中描述的人脸检测算法

我们需要解决的一件事是如何将 JeVois 传感器中的图像转换为 Dlib 图像格式。快速的网络搜索显示，Dlib 提供了将 OpenCV 图像重新解释（无需复制）为 Dlib 图像的功能。因此我们将使用它，例如 https://stackoverflow.com/questions/29118317/how-to-convert-mat-to-array2drgb-pixel 中建议的那样

因此，我们将抓取 JeVois YUYV RawImage，转换为 OpenCV RGB，并将其重新解释为 Dlib RGB。

至于输出，我们只需为该模块做一个非常简单的布局，其中我们显示输入视频，并在检测到的人脸周围画上方框，并在下方画一个 24 像素高的小消息区域来显示检测次数。因此，我们计划从传感器捕获 320x240 视频，并将 320x264 视频输出到 USB。

我们最终得到了这个模块，它与 \b jevoisbase 中的许多模块非常相似：

\code
// ///////////////////////////////////////////////////////////////////////////////////////////////////////////////////
//
// JeVois Smart Embedded Machine Vision Toolkit - Copyright (C) 2016 by Laurent Itti, the University of Southern
// California (USC), and iLab at USC. See http://iLab.usc.edu and http://jevois.org for information about this project.
//
// This file is part of the JeVois Smart Embedded Machine Vision Toolkit.  This program is free software; you can
// redistribute it and/or modify it under the terms of the GNU General Public License as published by the Free Software
// Foundation, version 2.  This program is distributed in the hope that it will be useful, but WITHOUT ANY WARRANTY;
// without even the implied warranty of MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the GNU General Public
// License for more details.  You should have received a copy of the GNU General Public License along with this program;
// if not, write to the Free Software Foundation, Inc., 51 Franklin Street, Fifth Floor, Boston, MA 02110-1301, USA.
//
// Contact information: Laurent Itti - 3641 Watt Way, HNB-07A - Los Angeles, CA 90089-2520 - USA.
// Tel: +1 213 740 3527 - itti@pollux.usc.edu - http://iLab.usc.edu - http://jevois.org
// ///////////////////////////////////////////////////////////////////////////////////////////////////////////////////
/*! \file */

#include <jevois/Core/Module.H>
#include <jevois/Image/RawImageOps.H>
#include <jevois/Debug/Timer.H>

#include <dlib/opencv/cv_image.h>
#include <dlib/array2d/array2d_generic_image.h>
#include <dlib/image_processing/frontal_face_detector.h>

// icon by dlib team

//! 使用 Dlib C++ 机器视觉库进行人脸检测 
/*! 使用 dlib 提供的 HOG（梯度直方图）算法检测人脸。

    该模块深受http://dlib.net/face_detection_ex.cpp.html的启发。

    这是如何将 dlib 与 JeVois 结合使用的示例。

    有关 dlib 的更多信息，请参阅 http://dlib.net - Dlib 为机器视觉、深度神经网络、图像处理和机器学习提供了大量高质量的 C++11 算法。

    @author Laurent Itti

    @videomapping YUYV 320 264 15.0 YUYV 320 240 15.0 JeVois FaceDetector
    @email itti\@usc.edu
    @address University of Southern California, HNB-07A, 3641 Watt Way, Los Angeles, CA 90089-2520, USA
    @copyright Copyright (C) 2018 by Laurent Itti, iLab and the University of Southern California
    @mainurl http://jevois.org
    @supporturl http://jevois.org/doc
    @otherurl http://iLab.usc.edu
    @license GPL v3
    @distribution Unrestricted
    @restrictions None
    \ingroup modules */
class FaceDetector : public jevois::StdModule
{
  private:
    dlib::frontal_face_detector itsDetector;
    
  public:
    //! Constructor
    FaceDetector(std::string const & instance) : jevois::StdModule(instance)
    {
      itsDetector = dlib::get_frontal_face_detector();
    }
    
    //! Virtual destructor for safe inheritance
    virtual ~FaceDetector() { }

    //! Processing function
    virtual void process(jevois::InputFrame && inframe, jevois::OutputFrame && outframe) override
    {
      static jevois::Timer timer("processing", 30, LOG_DEBUG);

      // Wait for next available camera image:
      jevois::RawImage const inimg = inframe.get();

      timer.start();
      
      // We only support YUYV pixels in this example, any resolution:
      unsigned int const w = inimg.width, h = inimg.height;
      inimg.require("input", inimg.width, inimg.height, V4L2_PIX_FMT_YUYV);

      // 在我们处理它时，启动一个线程来等待帧并将输入粘贴到其中：
      jevois::RawImage outimg;
      auto paste_fut = std::async(std::launch::async, [&]() {
          outimg = outframe.get();
          outimg.require("output", outimg.width, h + 24, V4L2_PIX_FMT_YUYV);

          // Paste the current input image:
          jevois::rawimage::paste(inimg, outimg, 0, 0);
          jevois::rawimage::writeText(outimg, "JeVois dlib Face Detector", 3, 3, jevois::yuyv::White);

          // Blank out the bottom of the frame:
          jevois::rawimage::drawFilledRect(outimg, 0, h, w, outimg.height - h, jevois::yuyv::Black);
        });

      // Convert to OpenCV RGB:
      cv::Mat cvimg = jevois::rawimage::convertToCvRGB(inimg);

      // Reinterpret as dlib image:
      dlib::array2d<dlib::rgb_pixel> dlibimg;
      dlib::assign_image(dlibimg, dlib::cv_image<dlib::rgb_pixel>(cvimg));

      // Detect faces:
      std::vector<dlib::rectangle> dets = itsDetector(dlibimg);
      
      // 等待粘贴线程完成并让相机知道我们已完成输入图像的处理：
      paste_fut.get(); inframe.done();

      // 绘制矩形并发送串行消息：
      jevois::rawimage::writeText(outimg, "Detected " + std::to_string(dets.size()) + " faces",
                                  3, h+6, jevois::yuyv::White);

      for (auto const & r : dets)
      {
        jevois::rawimage::drawRect(outimg, r.left(), r.top(), r.width(), r.height(), 2, jevois::yuyv::LightGreen);
        sendSerialImg2D(w, h, r.left() - r.width() / 2, r.top() - r.height() / 2, r.width(), r.height(), "face");
      }
      
      // Show processing fps:
      std::string const & fpscpu = timer.stop();
      jevois::rawimage::writeText(outimg, fpscpu, 3, h - 13, jevois::yuyv::White);
      
      // 通过 USB 将包含处理结果的输出图像发送到主机：
      outframe.send();
    }
};

// 允许将模块作为共享对象 (.so) 文件加载：
JEVOIS_REGISTER_MODULE(FaceDetector);

\endcode

为主机编译 
------------------

让我们通过首先在主机上编译和运行来确保 Dlib 能够正确编译和链接，并且我们的算法能够正常工作。

在 \b facedetector 目录中，我们只需输入：

\code{.py}
./rebuild-host.sh
\endcode

并得到如下输出：


\verbatim
itti@iLab0:~/facedetector$ ./rebuild-host.sh 
-- JeVois version 1.9.0
-- JEVOIS_PLATFORM: OFF
-- JEVOIS_VENDOR: Tutorial
-- JeVois microSD card mount point: /media/itti/JEVOIS
-- JeVois serial-over-USB device: /dev/ttyACM0
-- Install prefix for executable programs: /usr
-- Host path to jevois modules root: /jevois
-- The C compiler identification is GNU 7.3.0
-- The CXX compiler identification is GNU 7.3.0
-- Check for working C compiler: /usr/bin/cc
-- Check for working C compiler: /usr/bin/cc -- works
-- Detecting C compiler ABI info
-- Detecting C compiler ABI info - done
-- Detecting C compile features
-- Detecting C compile features - done
-- Check for working CXX compiler: /usr/bin/c++
-- Check for working CXX compiler: /usr/bin/c++ -- works
-- Detecting CXX compiler ABI info
-- Detecting CXX compiler ABI info - done
-- Detecting CXX compile features
-- Detecting CXX compile features - done
-- JeVois SDK root: /lab/itti/jevois/software/jevois-sdk
-- Host path to jevois lib and data install root: /jevois
-- Adding compilation directives for C++ module FaceDetector base src/Modules
-- Configuring done
-- Generating done
-- Build files have been written to: /lab/itti/facedetector/hbuild
Scanning dependencies of target modinfo_FaceDetector
[ 25%] Generating ../src/Modules/FaceDetector/modinfo.yaml, ../src/Modules/FaceDetector/modinfo.html
[ 25%] Built target modinfo_FaceDetector
Scanning dependencies of target FaceDetector
[ 50%] Building CXX object CMakeFiles/FaceDetector.dir/src/Modules/FaceDetector/FaceDetector.C.o
[ 75%] Building CXX object CMakeFiles/FaceDetector.dir/dlib/dlib/all/source.cpp.o
In file included from /lab/itti/facedetector/dlib/dlib/all/../base64/../algs.h:111:0,
                 from /lab/itti/facedetector/dlib/dlib/all/../base64/base64_kernel_1.h:6,
                 from /lab/itti/facedetector/dlib/dlib/all/../base64/base64_kernel_1.cpp:6,
                 from /lab/itti/facedetector/dlib/dlib/all/source.cpp:11:
/lab/itti/facedetector/dlib/dlib/all/../global_optimization/global_function_search.cpp: In member function ‘void dlib::global_function_search::set_monte_carlo_upper_bound_sample_num(size_t)’:
/lab/itti/facedetector/dlib/dlib/all/../global_optimization/global_function_search.cpp:899:24: warning: comparison of unsigned expression >= 0 is always true [-Wtype-limits]
         DLIB_CASSERT(0 <= num);
                      ~~^~~~
/lab/itti/facedetector/dlib/dlib/all/../base64/../assert.h:157:47: note: in definition of macro ‘DLIB_WORKAROUND_VISUAL_STUDIO_BUGS’
 #define DLIB_WORKAROUND_VISUAL_STUDIO_BUGS(x) x
                                               ^
/lab/itti/facedetector/dlib/dlib/all/../base64/../assert.h:160:48: note: in expansion of macro ‘DLIBM_CASSERT’
 #define DLIBM_CASSERT_1_ARGS(exp)              DLIBM_CASSERT(exp,"")
                                                ^~~~~~~~~~~~~
/lab/itti/facedetector/dlib/dlib/all/../base64/../assert.h:157:47: note: in expansion of macro ‘DLIBM_CASSERT_1_ARGS’
 #define DLIB_WORKAROUND_VISUAL_STUDIO_BUGS(x) x
                                               ^
/lab/itti/facedetector/dlib/dlib/all/../global_optimization/global_function_search.cpp:899:9: note: in expansion of macro ‘DLIB_CASSERT’
         DLIB_CASSERT(0 <= num);
         ^
In file included from /lab/itti/facedetector/dlib/dlib/all/../bsp/../sockets/../threads/../member_function_pointer.h:6:0,
                 from /lab/itti/facedetector/dlib/dlib/all/../bsp/../sockets/../threads/threads_kernel_shared.h:11,
                 from /lab/itti/facedetector/dlib/dlib/all/../bsp/../sockets/../threads/threads_kernel_2.h:173,
                 from /lab/itti/facedetector/dlib/dlib/all/../bsp/../sockets/../threads/posix.h:4,
                 from /lab/itti/facedetector/dlib/dlib/all/../bsp/../sockets/../threads/threads_kernel.h:13,
                 from /lab/itti/facedetector/dlib/dlib/all/../bsp/../sockets/../threads.h:11,
                 from /lab/itti/facedetector/dlib/dlib/all/../bsp/../sockets/sockets_kernel_2.h:36,
                 from /lab/itti/facedetector/dlib/dlib/all/../bsp/../sockets/posix.h:4,
                 from /lab/itti/facedetector/dlib/dlib/all/../bsp/../sockets.h:14,
                 from /lab/itti/facedetector/dlib/dlib/all/../bsp/bsp.h:12,
                 from /lab/itti/facedetector/dlib/dlib/all/../bsp/bsp.cpp:6,
                 from /lab/itti/facedetector/dlib/dlib/all/source.cpp:33:
/lab/itti/facedetector/dlib/dlib/all/../bsp/../sockets/../threads/../member_function_pointer/member_function_pointer_kernel_1.h: At global scope:
/lab/itti/facedetector/dlib/dlib/all/../bsp/../sockets/../threads/../member_function_pointer/member_function_pointer_kernel_1.h:343:18: warning: ‘void dlib::member_function_pointer<PARAM1, PARAM2, void, void>::mp_impl_const<T>::call(PARAM1, PARAM2) const [with T = dlib::impl::helper_parallel_for<dlib::impl::helper_parallel_for_funct<dlib::cpu::resize_bilinear(dlib::tensor&, long int, long int, const dlib::tensor&, long int, long int)::<lambda(long int)> > >; PARAM1 = long int; PARAM2 = long int]’ declared ‘static’ but never defined [-Wunused-function]
             void call (PARAM1 p1, PARAM2 p2) const  { (static_cast<const T*>(this->o)->*callback)(p1,p2); }
                  ^~~~
In file included from /lab/itti/facedetector/dlib/dlib/all/../cuda/../matrix.h:11:0,
                 from /lab/itti/facedetector/dlib/dlib/all/../cuda/tensor.h:8,
                 from /lab/itti/facedetector/dlib/dlib/all/../cuda/cpu_dlib.h:9,
                 from /lab/itti/facedetector/dlib/dlib/all/../cuda/cpu_dlib.cpp:8,
                 from /lab/itti/facedetector/dlib/dlib/all/source.cpp:82:
/lab/itti/facedetector/dlib/dlib/all/../cuda/../matrix/matrix_la.h: In function ‘long int dlib::svd4(dlib::svd_u_mode, bool, const dlib::matrix_exp<EXP>&, dlib::matrix<typename EXP::type, uM, uN, MM1, L1>&, dlib::matrix<typename EXP::type, qN, qX, MM2, L1>&, dlib::matrix<typename EXP::type, vM, vN, MM3, L1>&) [with EXP = dlib::matrix_op<dlib::op_trans<dlib::matrix_op<dlib::op_trans<dlib::matrix<double, 1, 2> > > > >; long int qN = 1; long int qX = 1; long int uM = 1; long int uN = 1; long int vM = 2; long int vN = 1; MM1 = dlib::memory_manager_stateless_kernel_1<char>; MM2 = dlib::memory_manager_stateless_kernel_1<char>; MM3 = dlib::memory_manager_stateless_kernel_1<char>; L1 = dlib::row_major_layout]’:
/lab/itti/facedetector/dlib/dlib/all/../cuda/../matrix/matrix_la.h:225:32: warning: iteration 1 invokes undefined behavior [-Waggressive-loop-optimizations]
             y = abs(q(i)) + abs(e(i));
                             ~~~^~~~~~
/lab/itti/facedetector/dlib/dlib/all/../cuda/../matrix/matrix_la.h:163:20: note: within this loop
         for (i=0; i<n; i++)
                   ~^~
/lab/itti/facedetector/dlib/dlib/all/../cuda/../matrix/matrix_la.h: In member function ‘void dlib::kalman_filter<states, measurements>::update(const dlib::matrix<double, measurements, 1>&) [with long int states = 2; long int measurements = 1]’:
/lab/itti/facedetector/dlib/dlib/all/../cuda/../matrix/matrix_la.h:412:37: warning: ‘*((void*)& v +-8)’ may be used uninitialized in this function [-Wmaybe-uninitialized]
                         v(j,i) = -x * s + z * c;
                                  ~~~^~~
/lab/itti/facedetector/dlib/dlib/all/../cuda/../matrix/matrix_la.h:1421:72: note: ‘*((void*)& v +-8)’ was declared here
         matrix<typename EXP::type, EXP::NC, EXP::NC,MM1, layout_type > v;
                                                                        ^
[100%] Linking CXX shared library FaceDetector.so
[100%] Built target FaceDetector
[ 25%] Generating ../src/Modules/FaceDetector/modinfo.yaml, ../src/Modules/FaceDetector/modinfo.html
[ 25%] Built target modinfo_FaceDetector
[100%] Built target FaceDetector
Install the project...
-- Install configuration: ""
-- Installing: /jevois/modules/Tutorial/FaceDetector
-- Installing: /jevois/modules/Tutorial/FaceDetector/icon.png
-- Installing: /jevois/modules/Tutorial/FaceDetector/postinstall
-- Installing: /jevois/modules/Tutorial/FaceDetector/screenshot1.png
-- Installing: /jevois/modules/Tutorial/FaceDetector/modinfo.html
-- Installing: /jevois/modules/Tutorial/FaceDetector/FaceDetector.C
-- Installing: /jevois/modules/Tutorial/FaceDetector/FaceDetector.so
-- Up-to-date: /jevois/share
-- Installing: /jevois/share/README.txt
\endverbatim

因此，我们在 Dlib 中遇到了一些警告，但一切都编译正常。我们准备在主机上进行测试。

在主机上测试 
---------------

- 在主机上进行测试之前，我们需要为模块添加视频映射，并使用模块所需的分辨率。为此，我们输入：

\code{.py}
sudo jevois-add-videomapping YUYV 320 264 15.0 YUYV 320 240 15.0 Tutorial FaceDetector
\endcode

它会在主机上的 <b>/jevois/config/videomappings.cfg</b> 末尾添加一个条目。

我们还使用该视频映射编辑 <b>src/Modules/FaceDetector/postinstall</b>。稍后我们将模块上传到 JeVois 相机时，该 \b postinstall 脚本将被使用。

- 现在将普通网络摄像头插入主机（不是 JeVois 摄像头）

- 然后开始

\code{.py}
jevois-daemon
\endcode

- 我们需要找出分配给我们模块的视频映射编号，为此我们输入：
\verbatim
listmappings
\endverbatim

  我们得到了一个包含 \b FaceDetector 的长列表。在我们的特定安装中，
\verbatim
   ...
   38 - OUT: YUYV 320x286 @ 30fps CAM: YUYV 320x240 @ 30fps MOD: JeVois:DemoQRcode C++
   39 - OUT: YUYV 320x266 @ 30fps CAM: YUYV 320x240 @ 30fps MOD: JeVois:ArUcoBlob C++
   40 - OUT: YUYV 320x264 @ 15fps CAM: YUYV 320x240 @ 15fps MOD: Tutorial:FaceDetector C++
   ...
\endverbatim

- 我们现在通过发送命令 \b quit 来退出 jevois-daemon

- 我们再次启动它，这次请求我们上面找到的视频映射编号 40：
\code{.py}
jevois-daemon --videomapping=40
\endcode

- Here it is!！

\image html dlib1.png

运行平台 
--------------------

现在让我们在 JeVois 相机上交叉编译并运行我们的模块。

- 我们将使用 \b jvpkg 方法，因为它对于单个模块来说是最简单的。在此方法中，我们交叉编译模块并将其打包到 .jvpkg 存档（这只是一个 zip 文件）中，然后将该包复制到 JeVois 相机的 microSD 上的 <b>JEVOIS:/packages/</b>。JeVois 将在下次启动时解压并安装该包。

- 检查 <b>src/Modules/FaceDetector/postinstall</b> 是否包含模块所需的视频映射，它应该如下所示：
\verbatim
#!/bin/sh
# 如果模块以 .jvpkg 文件的形式添加到 microSD 卡的 jevois/packages/ 目录中，则 JeVois 安装模块后会执行此脚本一次。执行后，
# 脚本将从 microSD 卡中删除。
#
# 调用者脚本将在启动脚本之前将当前目录设置为此脚本的位置。

# 将我们的视频映射添加到主映射文件：
jevois-add-videomapping YUYV 320 264 15.0 YUYV 320 240 15.0 Tutorial FaceDetector

# Example of a simple message:
echo "FaceDetector is now installed"
\endverbatim

- 要编译成 \b jvpkg 包，我们只需运行 `rebuild-platform.sh`，无需额外选项。输出应该大致如下：
\verbatim
itti@iLab0:~/facedetector$ ./rebuild-platform.sh 
-- JeVois version 1.9.0
-- JEVOIS_PLATFORM: ON
-- JEVOIS_VENDOR: Tutorial
-- JeVois microSD card mount point: /media/itti/JEVOIS
-- JeVois serial-over-USB device: /dev/ttyACM0
-- JEVOIS_MODULES_TO_STAGING: OFF
-- JEVOIS_MODULES_TO_MICROSD: OFF
-- JEVOIS_MODULES_TO_LIVE: OFF
-- Install prefix for executable programs: /var/lib/jevois-build/usr
-- Host path to jevois modules root: /var/lib/jevois-microsd
-- The C compiler identification is GNU 7.2.0
-- The CXX compiler identification is GNU 7.2.0
-- Check for working C compiler: /lab/itti/jevois/software/jevois-sdk/out/sun8iw5p1/linux/common/buildroot/host/usr/bin/arm-buildroot-linux-gnueabihf-gcc
-- Check for working C compiler: /lab/itti/jevois/software/jevois-sdk/out/sun8iw5p1/linux/common/buildroot/host/usr/bin/arm-buildroot-linux-gnueabihf-gcc -- works
-- Detecting C compiler ABI info
-- Detecting C compiler ABI info - done
-- Detecting C compile features
-- Detecting C compile features - done
-- Check for working CXX compiler: /lab/itti/jevois/software/jevois-sdk/out/sun8iw5p1/linux/common/buildroot/host/usr/bin/arm-buildroot-linux-gnueabihf-g++
-- Check for working CXX compiler: /lab/itti/jevois/software/jevois-sdk/out/sun8iw5p1/linux/common/buildroot/host/usr/bin/arm-buildroot-linux-gnueabihf-g++ -- works
-- Detecting CXX compiler ABI info
-- Detecting CXX compiler ABI info - done
-- Detecting CXX compile features
-- Detecting CXX compile features - done
-- JeVois SDK root: /lab/itti/jevois/software/jevois-sdk
-- Host path to jevois lib and data install root: /lab/itti/facedetector/jvpkg
-- Adding compilation directives for C++ module FaceDetector base src/Modules
-- Configuring done
-- Generating done
-- Build files have been written to: /lab/itti/facedetector/pbuild
Scanning dependencies of target modinfo_FaceDetector
[ 25%] Generating ../src/Modules/FaceDetector/modinfo.yaml, ../src/Modules/FaceDetector/modinfo.html
[ 25%] Built target modinfo_FaceDetector
Scanning dependencies of target FaceDetector
[ 50%] Building CXX object CMakeFiles/FaceDetector.dir/src/Modules/FaceDetector/FaceDetector.C.o
[ 75%] Building CXX object CMakeFiles/FaceDetector.dir/dlib/dlib/all/source.cpp.o
In file included from /lab/itti/facedetector/dlib/dlib/all/../base64/../algs.h:111:0,
                 from /lab/itti/facedetector/dlib/dlib/all/../base64/base64_kernel_1.h:6,
                 from /lab/itti/facedetector/dlib/dlib/all/../base64/base64_kernel_1.cpp:6,
                 from /lab/itti/facedetector/dlib/dlib/all/source.cpp:11:
/lab/itti/facedetector/dlib/dlib/all/../global_optimization/global_function_search.cpp: In member function ‘void dlib::global_function_search::set_monte_carlo_upper_bound_sample_num(size_t)’:
/lab/itti/facedetector/dlib/dlib/all/../global_optimization/global_function_search.cpp:899:24: warning: comparison of unsigned expression >= 0 is always true [-Wtype-limits]
         DLIB_CASSERT(0 <= num);
                      ~~^~~~
/lab/itti/facedetector/dlib/dlib/all/../base64/../assert.h:157:47: note: in definition of macro ‘DLIB_WORKAROUND_VISUAL_STUDIO_BUGS’
 #define DLIB_WORKAROUND_VISUAL_STUDIO_BUGS(x) x
                                               ^
/lab/itti/facedetector/dlib/dlib/all/../base64/../assert.h:160:48: note: in expansion of macro ‘DLIBM_CASSERT’
 #define DLIBM_CASSERT_1_ARGS(exp)              DLIBM_CASSERT(exp,"")
                                                ^~~~~~~~~~~~~
/lab/itti/facedetector/dlib/dlib/all/../base64/../assert.h:157:47: note: in expansion of macro ‘DLIBM_CASSERT_1_ARGS’
 #define DLIB_WORKAROUND_VISUAL_STUDIO_BUGS(x) x
                                               ^
/lab/itti/facedetector/dlib/dlib/all/../global_optimization/global_function_search.cpp:899:9: note: in expansion of macro ‘DLIB_CASSERT’
         DLIB_CASSERT(0 <= num);
         ^
In file included from /lab/itti/facedetector/dlib/dlib/all/../bsp/../sockets/../threads/../member_function_pointer.h:6:0,
                 from /lab/itti/facedetector/dlib/dlib/all/../bsp/../sockets/../threads/threads_kernel_shared.h:11,
                 from /lab/itti/facedetector/dlib/dlib/all/../bsp/../sockets/../threads/threads_kernel_2.h:173,
                 from /lab/itti/facedetector/dlib/dlib/all/../bsp/../sockets/../threads/posix.h:4,
                 from /lab/itti/facedetector/dlib/dlib/all/../bsp/../sockets/../threads/threads_kernel.h:13,
                 from /lab/itti/facedetector/dlib/dlib/all/../bsp/../sockets/../threads.h:11,
                 from /lab/itti/facedetector/dlib/dlib/all/../bsp/../sockets/sockets_kernel_2.h:36,
                 from /lab/itti/facedetector/dlib/dlib/all/../bsp/../sockets/posix.h:4,
                 from /lab/itti/facedetector/dlib/dlib/all/../bsp/../sockets.h:14,
                 from /lab/itti/facedetector/dlib/dlib/all/../bsp/bsp.h:12,
                 from /lab/itti/facedetector/dlib/dlib/all/../bsp/bsp.cpp:6,
                 from /lab/itti/facedetector/dlib/dlib/all/source.cpp:33:
/lab/itti/facedetector/dlib/dlib/all/../bsp/../sockets/../threads/../member_function_pointer/member_function_pointer_kernel_1.h: At global scope:
/lab/itti/facedetector/dlib/dlib/all/../bsp/../sockets/../threads/../member_function_pointer/member_function_pointer_kernel_1.h:343:18: warning: ‘void dlib::member_function_pointer<PARAM1, PARAM2, void, void>::mp_impl_const<T>::call(PARAM1, PARAM2) const [with T = dlib::impl::helper_parallel_for<dlib::impl::helper_parallel_for_funct<dlib::cpu::resize_bilinear(dlib::tensor&, long int, long int, const dlib::tensor&, long int, long int)::<lambda(long int)> > >; PARAM1 = long int; PARAM2 = long int]’ declared ‘static’ but never defined [-Wunused-function]
             void call (PARAM1 p1, PARAM2 p2) const  { (static_cast<const T*>(this->o)->*callback)(p1,p2); }
                  ^~~~
In file included from /lab/itti/facedetector/dlib/dlib/all/../cuda/../matrix.h:11:0,
                 from /lab/itti/facedetector/dlib/dlib/all/../cuda/tensor.h:8,
                 from /lab/itti/facedetector/dlib/dlib/all/../cuda/cpu_dlib.h:9,
                 from /lab/itti/facedetector/dlib/dlib/all/../cuda/cpu_dlib.cpp:8,
                 from /lab/itti/facedetector/dlib/dlib/all/source.cpp:82:
/lab/itti/facedetector/dlib/dlib/all/../cuda/../matrix/matrix_la.h: In function ‘long int dlib::svd4(dlib::svd_u_mode, bool, const dlib::matrix_exp<EXP>&, dlib::matrix<typename EXP::type, uM, uN, MM1, L1>&, dlib::matrix<typename EXP::type, qN, qX, MM2, L1>&, dlib::matrix<typename EXP::type, vM, vN, MM3, L1>&) [with EXP = dlib::matrix_op<dlib::op_trans<dlib::matrix_op<dlib::op_trans<dlib::matrix<double, 1, 2> > > > >; long int qN = 1; long int qX = 1; long int uM = 1; long int uN = 1; long int vM = 2; long int vN = 1; MM1 = dlib::memory_manager_stateless_kernel_1<char>; MM2 = dlib::memory_manager_stateless_kernel_1<char>; MM3 = dlib::memory_manager_stateless_kernel_1<char>; L1 = dlib::row_major_layout]’:
/lab/itti/facedetector/dlib/dlib/all/../cuda/../matrix/matrix_la.h:225:32: warning: iteration 1 invokes undefined behavior [-Waggressive-loop-optimizations]
             y = abs(q(i)) + abs(e(i));
                             ~~~^~~~~~
/lab/itti/facedetector/dlib/dlib/all/../cuda/../matrix/matrix_la.h:163:20: note: within this loop
         for (i=0; i<n; i++)
                   ~^~
/lab/itti/facedetector/dlib/dlib/all/../cuda/../matrix/matrix_la.h: In member function ‘void dlib::kalman_filter<states, measurements>::update(const dlib::matrix<double, measurements, 1>&) [with long int states = 2; long int measurements = 1]’:
/lab/itti/facedetector/dlib/dlib/all/../cuda/../matrix/matrix_la.h:1421:72: warning: ‘*((void*)& v +-8)’ may be used uninitialized in this function [-Wmaybe-uninitialized]
         matrix<typename EXP::type, EXP::NC, EXP::NC,MM1, layout_type > v;
                                                                        ^
[100%] Linking CXX shared library FaceDetector.so
[100%] Built target FaceDetector
[ 25%] Generating ../src/Modules/FaceDetector/modinfo.yaml, ../src/Modules/FaceDetector/modinfo.html
[ 25%] Built target modinfo_FaceDetector
[100%] Built target FaceDetector
Install the project...
-- Install configuration: ""
-- Installing: /lab/itti/facedetector/jvpkg/modules/Tutorial/FaceDetector
-- Installing: /lab/itti/facedetector/jvpkg/modules/Tutorial/FaceDetector/icon.png
-- Installing: /lab/itti/facedetector/jvpkg/modules/Tutorial/FaceDetector/postinstall
-- Installing: /lab/itti/facedetector/jvpkg/modules/Tutorial/FaceDetector/screenshot1.png
-- Installing: /lab/itti/facedetector/jvpkg/modules/Tutorial/FaceDetector/modinfo.html
-- Installing: /lab/itti/facedetector/jvpkg/modules/Tutorial/FaceDetector/FaceDetector.C
-- Installing: /lab/itti/facedetector/jvpkg/modules/Tutorial/FaceDetector/FaceDetector.so
-- Set runtime path of "/lab/itti/facedetector/jvpkg/modules/Tutorial/FaceDetector/FaceDetector.so" to ""
-- Installing: /lab/itti/facedetector/jvpkg/share
-- Installing: /lab/itti/facedetector/jvpkg/share/README.txt
\endverbatim

\note 确保开发机器和 microSD 卡上的 JeVois 软件版本完全匹配，否则新模块将无法加载。例如，从运行 `rebuild-platform.sh` 中可以看到，我们使用的是 \b jevois-sdk-dev 版本 1.9.0。要检查 microSD 卡上运行的版本，请启动 JeVois Inventor 并在检测到相机时查看底部状态栏。


- 该模块已针对 JeVois 处理器进行交叉编译，并且生成的文件已复制到 <b>~/facedetector/jvpkg/</b>，在那里它们可以打包成单个 JeVois 包文件，稍后可以复制到 microSD 并在智能相机上运行。

  要创建包，我们运行：
  \code{.py}
cd pbuild
make jvpkg
cd ..
  \endcode 
  然后我们得到一个文件<b>~/facedetector/Tutorial_facedetector.jvpkg</b>

- 让我们将文件复制到我们的 microSD。您可以将 microSD 卡插入您的桌面，也可以按照 \ref UserUSBSD 中的说明从连接的 JeVois 相机实时导出

  然后将 \b Tutorial_facedetector.jvpkg 复制到 microSD 上的 <b>JEVOIS:/packages/</b> 中。

- 干净地弹出卡并重新启动 JeVois。重新启动后，相机将解压并安装我们的模块。它还将从我们的 \b postinstall 文件的内容中添加我们的视频映射。

- 让我们启动 JeVois Inventor 并找到我们的新模块：

\jvimg{dlib2.png, 70%}

- 宾果，我们的由 Dlib 驱动的面部检测器正在我们的 JeVois 相机上运行！

\jvimg{dlib3.png, 70%}

进一步 
-------------

- 将 <b>src/Modules/FaceDetector/icon.png</b> 中的图标更改为更好的图标。建议尺寸为 128x128。如果您想将图标的边角弄圆，可以使用我们的脚本 https://github.com/jevois/jevois/blob/master/scripts/round-image-corners.sh

- Dlib 包含许多高质量算法。查看它们的示例并将一些移植到 JeVois。

- 然而，该算法并不是 JeVois 上速度最快、最强大的人脸检测器（事实上，它似乎只使用一个 CPU 核心）。请查看 \jvmod{DetectionDNN} 和 \jvmod{PyDetectionDNN} 了解 OpenCV 人脸检测算法。不过，Dlib 确实提供了相当强大的面部特征检测和面部匹配功能。

- 该模块已集成到标准 JeVois 发行版中；它可以在 github repo \b jevoisextra 中使用，网址为 https://github.com/jevois/jevoisextra，并且可以在 JeVois 版本 1.9.1 之后的标准 microSD 卡上使用

*/

