/*! \page ProgrammerInvHello Hello JeVois using JeVois Inventor

本教程将向您展示如何使用 JeVois Inventor 图形用户界面创建在 JeVois 智能相机上运行的简单机器视觉模块。

入门 
---------------

- 从 http://jevois.org/start/start.html 下载并安装 JeVois Inventor

- 通过教程 \ref UserInventor 进行尝试

创建您的第一个模块 
--------------------------

- 从 JeVois Inventor 的下拉菜单中选择<b>新建 Python 模块...</b>（或按 `CTRL-N`）。

- 填写如下所示的详细信息：

  \jvimg{invhello1.png, 40%}

  几点注意事项：
  + 模块名称是模块的名称，供应商名称用于将您创建的所有模块分组到单个目录下。
  + 模块名称和供应商名称必须以大写字母开头。
  + 将鼠标悬停在每个字段上可查看一些提示。

  + 您至少需要提供上面屏幕截图中黑色字体显示的数据。如果您不提供上面灰色字体显示的数据，则将使用空白值（而不是灰色字体的示例建议值）。灰色值只是建议，而不是默认值。因此，即使您喜欢这些建议，也需要输入它们（例如，您需要为 USB 输出视频格式输入 320、240 和 33 以确认这确实是您想要的）。
  + USB 输出视频格式是 JeVois 将发送到主机的视频分辨率和帧速率。这是您想要用于机器视觉算法结果的分辨率。
  + 相机传感器视频格式是 JeVois 从其相机传感器捕获图像的分辨率。
  + (基本) JeVois 机器视觉模块的任务是：为每个相机传感器图像创建一个 USB 输出图像。

- 单击 \b Finish 时，JeVois 将重新启动。这是必要的，因为 JeVois 现在将添加新的 USB 输出视频格式作为其可以生成的格式之一，但 USB 摄像机并不打算在运行时更改其视频格式。因此，我们需要模拟摄像机断开连接，然后重新连接，以便主机再次向 JeVois 请求支持的视频分辨率列表并发现我们的新模块。

- JeVois 重启后，您应该能够从 <b>Vision Module</b> 下拉菜单中选择新模块：
  \jvimg{invhello2.png, 70%}

- 该模块的代码默认预先填充，以运行简单的拉普拉斯边缘检测器。


了解更多信息：

- \ref Concepts
- \ref JeVoisInventor
- \ref UserInventor

编写代码 
----------------

切换到 JeVois Inventor 的 \b Code 选项卡。您将看到一个 Python 代码编辑器。

JeVois 支持完整的 Python 3.6、numpy 和 OpenCV 3.4.0。

如上所述，我们的任务是在 JeVois 相机传感器捕获的视频帧中计算一些有趣的东西，并创建一些结果视频帧，我们可以通过 USB 链接将其发送到主机。

智能相机中运行的 JeVois 核心软件负责处理从传感器捕获图像和将输出图像发送到 USB 链路的所有细节。因此，我们剩下的工作就是关注从输入图像到输出图像的转换。

一个不会改变图像的模块，因此使 JeVois 的行为就像一个普通的 USB 网络摄像头，它看起来像这样：

\code{.py}
import libjevois as jevois
import cv2
import numpy as np

class Hello:
    def process(self, inframe, outframe):
      img = inframe.getCvBGR()
      outframe.sendCv(img)
\endcode


对于每个视频帧，JeVois 核心将调用类 \b Hello 的 \b process() 函数。

\b process() 的参数 \b inframe 是来自摄像头的下一个视频帧的代理。它允许我们请求、可能等待并最终获取摄像头传感器捕获的下一个帧。

同样，参数 \b outframe 是通过 USB 链路发送到主机的下一帧的代理。

在上面的代码中，我们基本上：

- 通过调用 <b>inframe.getCvBGR()</b> 向摄像头传感器请求下一个视频帧，作为 BGR 图像（蓝色、绿色、红色 - OpenCV 最常用的格式）
- 通过调用 <b>outframe.sendCv()</b> 将该图像通过 USB 发送到主机

亲自尝试一下：
- 在 JeVois Inventor 中，使用 `CTRL-A` 选择所有代码，然后使用 `DEL` 删除
- 选择上述所有代码并将其粘贴到 JeVois Inventor
- 单击 <b>保存到 JeVois</b> 或按 `CTRL-S`
- 您刚刚将智能 JeVois 相机变成了普通的哑相机！

\jvimg{invhello3.png, 70%}


但是 hello 部分呢？ 
------------------------------

要开始从普通相机过渡到智能相机，让我们看看如何使输出图像不同于输入图像。

- 从 <b>inframe.getCvBGR()</b> 获取的图像是 numpy 数组，这是大多数 OpenCV 函数操作的对象。

- 对于我们使用 <b>outframe.sendCv()</b> 发送的图像也是如此

- 这意味着，从上面的代码中，我们应该能够使用一些在图像中写入文本字符串的 OpenCV 函数来编写我们的问候消息。快速网络搜索 <em>opencv 3.4 write text python</em> 即可找到 https://docs.opencv.org/3.4.0/dc/da5/tutorial_py_drawing_functions.html

- 让我们像在<em>向图像添加文本</em>下所做的那样操作：

\code{.py}
import libjevois as jevois
import cv2
import numpy as np

class Hello:
    def process(self, inframe, outframe):
      img = inframe.getCvBGR()
      
      font = cv2.FONT_HERSHEY_SIMPLEX
      cv2.putText(img, 'Hello JeVois!', (10,100), font,
          1, (255,255,255), 2, cv2.LINE_AA)
      
      outframe.sendCv(img)
\endcode


\note OpenCV 文档中的原始示例对 OpenCV 函数使用了前缀 <b>cv.</b>，但我们使用了 <b>cv2.</b>，因此请记住相应地调整剪切和粘贴的代码。

\jvimg{invhello4.png, 70%}

如果我犯了错误怎么办？ 
------------------------

不用担心，JeVois 会捕获你的错误并将其显示在视频输出中。例如，删除以下行

\code{.py}
      font = cv2.FONT_HERSHEY_SIMPLEX
\endcode

并保存到 JeVois。你应该看到：

\jvimg{invhello5.png, 70%}

现在，请在向我们提问之前完整阅读整个消息。这里，错误信息的最后一行清楚地解释了错误：

\verbatim
NameError: name 'font' is not defined
\endverbatim

将您删除的行粘贴回正确的位置，保存到 JeVois，您应该会看到模块再次工作。

\note 如果消息太长而无法在视频图像中读取（例如，如果您正在编写具有非常低的输出分辨率的模块），您也可以通过切换到 \b Inventor 的控制台选项卡并单击 \b USB 按钮来查看<a>日志消息</a>，从而以文本形式查看相同的消息。

如何制作 JeVois Inventor 视频中展示的 ArUco 标签检测器？
----------------------------------------------------------------------------

这很简单：ArUco 标签检测内置于 OpenCV 中。您只需要 5 行新代码即可创建该演示（它们来自对 <em>opencv aruco python</em> 的快速网络搜索）：

\code{.py}
import libjevois as jevois
import cv2
import numpy as np

class Hello:
    def __init__(self):
      self.dict = cv2.aruco.Dictionary_get(cv2.aruco.DICT_4X4_50)
      self.params = cv2.aruco.DetectorParameters_create()

    def process(self, inframe, outframe):
      img = inframe.getCvBGR()
      grayimg = cv2.cvtColor(img, cv2.COLOR_BGR2GRAY)
      corners, ids, rej = cv2.aruco.detectMarkers(grayimg, self.dict, parameters = self.params)
      img = cv2.aruco.drawDetectedMarkers(img, corners, ids)
      outframe.sendCv(img)
\endcode


向它展示一些 ArUcos，例如来自 JeVois \jvmod{DemoArUco} 模块的屏幕截图的那些。

\jvimg{invhello6.png, 70%}

有关更多信息，请参阅 https://docs.opencv.org/3.1.0/d5/dae/tutorial_aruco_detection.html


下一步  
---------- 

您已准备好为 JeVois 编写自己的强大的机器视觉模块！

进一步阅读：

- \ref ProgrammerPython
- \ref ModulePythonTutorial
- \ref ProgrammerTutorials

*/

