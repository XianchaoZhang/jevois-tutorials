/*! \page ProgrammerPythonLib 从源代码添加新的 Python 库

本教程探讨如何以可通过 Python 访问的库的形式向 JeVois 添加新功能。我们使用 libdmtx（一个用于解码 DataMatrix 标签的库）作为示例。

目标 
-----

我们希望能够解码在 JeVois 上运行的 Python 模块中的 DataMatrix 标签。

障碍 
---------

- 与机器视觉和人工智能通常的情况一样，该问题的核心解码算法是用 C/C++ 编写的。因此，我们需要对其进行本地编译以在主机上运行进行测试，然后我们还需要对其进行交叉编译以在 JeVois 内的 ARM 处理器上运行。

- 除了实现核心功能的编译 C 库之外，我们还需要 Python 绑定，以便我们可以从 Python 调用该库。

- 除了获取核心库及其 Python 绑定之外，我们还需要在 Python 中编写一个 JeVois 模块，导入该库并以有意义的方式使用它。


攻击计划 
--------------

我们首先需要确定相关的源代码。在这种情况下，进行一些网络搜索可以得出以下结论：

- \b libdmtx 为用 C 语言编写的核心算法和库，位于 https://github.com/dmtx/libdmtx
- \b pylibdmtx 为 python 绑定，位于 https://github.com/NaturalHistoryMuseum/pylibdmtx

查看 \b pylibdmtx 提供的示例，它似乎将支持 OpenCV 使用的 numpy 图像，这很棒，因为这是 JeVois 中 Python 模块使用的图像格式。因此，我们应该能够轻松编写一个 JeVois Python 模块，该模块从摄像头传感器接收视频帧作为 OpenCV numpy 数组，并使用 \b pylibdmtx （调用 \b libdmtx 核心算法）对其进行处理。

获取库的源代码 
----------------------------------------

在本教程中，我们将把核心库、python 绑定和 JeVois 模块添加到 \b jevoisextra 存储库。欢迎您也这样做，一旦您有了一些很好的功能，请告诉我们，并向我们发送拉取请求，以便我们可以集成您的新库和模块，供所有人使用。

- 如果您尚未安装最新的 jevoisexra，请获取它：
\verbatim
cd
git clone https://github.com/jevois/jevoisextra.git
\endverbatim

- \b jevoisextra 具有获取外部源代码依赖项的机制，该机制位于 \b Contrib 中：
  + `reinstall.sh` 下载所有依赖项
  + `check.sh` 通过将文件 \b RELEASE （存储库的一部分，每次添加新依赖项时都会手动更新）中的数字与文件 \b .installed （由 reinstall.sh 运行时生成）中的数字进行比较，检查是否应下载依赖项。

这里我们在 reinstall.sh 中添加以下内容：

\code{.py}
    ###################################################################################################
    # Cleanup:
    /bin/rm -rf libdmtx pylibdmtx

    ###################################################################################################
    # Get the packages:

    # Core library to decode DataMatrix tags
    get_github dmtx libdmtx 0c8cb2f542e74ee49ea5b2290a9c60d69b74fc01

    # Python bindings to libdmtx
    get_github NaturalHistoryMuseum pylibdmtx 6b1bb59fc7b0c55c56bc09eb6ded173144149555
\endcode


`get_github` 的语法是创建者名称、仓库名称和提交版本。最好使用特定的提交版本，这样如果用户稍后运行此脚本时依赖项可能发生了重大变化并且主要修订版本可能不再与我们的代码兼容，他们就不会遇到意外。

然后我们在 \b RELEASE 中增加版本号并运行：
\verbatim
./reinstall.sh
\endverbatim

编译和交叉编译核心 C/C++ 库 
----------------------------------------------------

为了实现并发本机编译和交叉编译，我们将使用 CMake 构建工具以及 JeVois 框架提供的 CMake 宏和脚本。我们将以类似于在 JeVois 中编译 \b libjevoisbase 的方式编译 \b libdmtx。

一个障碍是 \b libdmtx 不使用 CMake 进行构建，而是使用 autoconf 和 configure 脚本以及 Makefile。由于这个项目不是很复杂，我们将在这里绕过 configure 脚本并编写我们自己的 CMakeLists.txt。我们只需通过检查 configure 脚本和 makefile 来弄清楚：

- 包含文件的位置

- 哪些 C 源文件应该编译到库中

- 在配置过程中设置的任何标志，我们也应该为库设置这些标志以实现完整的功能。

在这种特殊情况下，查看 \b libdmtx 的 \b configure.ac ，我们注意到：

- 我们需要链接到 \b libm 以获取一些数学函数，如 sin()、cos() 等。
- 我们需要 \b gettimeofday 才能工作。
- 变量 \b ARCH 已定义；但使用 grep 在任何源代码中查找它的任何用途均未返回任何内容，因此我们暂时将其忽略。

现在，查看 \b Makefile.am ，我们看到：

- 只有一个头文件：dmtx.h
- 源文件：dmtx.c，经检查，将包含 \b EXTRA_libdmtx_la_SOURCES 下列出的所有 .c 文件
- 提供了一些有益的 CPPFLAGS，让我们看看是否可以使用默认设置

使用存储库 \b jevoisbase 的 \b CMakeLists.txt 作为示例（因为它还构建了一个库 libjevoisbase.so），我们创建以下新的 CMakeLists.txt

由于 \b Contrib/libdmtx/ 是一个外部获取的存储库，因此让我们为 CMakeLists.txt 使用另一个位置。为了避免与可能安装在主机上的其他版本的 libdmtx 产生混淆和干扰（例如，来自 Ubunty 软件包），我们将我们的库命名为 \b libjvdmtx.so ，而不是普通的 \b libdmtx.so：

\verbatim
cd ~/jevoisextra
mkdir libjvdmtx
cd libjvdmtx
\endverbatim

在其中我们创建 CMakeLists.txt 如下：

\code{.py}
# CMake build rules for libdmtx library

# You may provide the installed JeVois config root and version as:
#   cmake -DJEVOIS_CONFIG=/jevois/config ..

cmake_minimum_required(VERSION 3.1)

# Set vendor name, our modules will be placed in a directory by that name under /jevois/modules:
set(JEVOIS_VENDOR "JeVois")
set(JEVOIS_CONFIG "/jevois/config" CACHE STRING "Path to JeVois config to use")

# Include our helper functions, config, etc from the JeVois install:
set(CMAKE_MODULE_PATH ${JEVOIS_CONFIG})
include(jevois_config)
include(JeVois)

# Set project name, detects compiler (which has been set by our helper module). Then set some complation flags:
project(jvdmtx C)
jevois_project_set_flags()

# Setup our library using just dmtx.c, which includes all other source files, and call it libjvdmtx with
# a version number:

# Note: jevois_setup_library2() expects that only one source file needs tobe compiled. You can add moe later
# using target_sources() as is done in the CMakeLists.txt of jevoisbase. If you want to compile all the C/C++
# files in a directory into the library, use jevois_setup_library() as is done in jevoisbase.
jevois_setup_library2("${CMAKE_CURRENT_SOURCE_DIR}/../Contrib/libdmtx/dmtx.c" jvdmtx 1.0.0)

# Add includes to our install / distribution package:
#add_subdirectory(include)

# libdmtx needs libm:
target_link_libraries(jvdmtx m)

# Let the .c files of libdmtx find dmtx.h:
include_directories(../Contrib/libdmtx)

# We could optionally add some definitions here:
#add_definitions(-DDARKNET_NNPACK)
\endcode


我们还从 \b jevoisbase 存储库复制 \b rebuild-host.sh、\b rebuild-platform.sh、\b COPYING、\b INSTALL 和 \b README ，并对其进行编辑以使其适应该项目。

让我们尝试为主机进行编译：

\verbatim
itti@iLab0:~/jevoisextra/libjvdmtx$ ./rebuild-host.sh
-- JeVois version 1.11.0
-- JEVOIS_PLATFORM: OFF
-- JEVOIS_VENDOR: JeVois
-- JeVois microSD card mount point: /media/itti/JEVOIS
-- JeVois serial-over-USB device: /dev/ttyACM0
-- Install prefix for executable programs: /usr
-- Host path to jevois modules root: /jevois
-- The C compiler identification is GNU 7.3.0
-- Check for working C compiler: /usr/bin/cc
-- Check for working C compiler: /usr/bin/cc -- works
-- Detecting C compiler ABI info
-- Detecting C compiler ABI info - done
-- Detecting C compile features
-- Detecting C compile features - done
-- JeVois SDK root: /lab/itti/jevois/software/jevois-sdk
-- Host path to jevois lib and data install root: /jevois
-- Configuring done
-- Generating done
-- Build files have been written to: /lab/itti/jevois/software/jevoisextra/libjvdmtx/hbuild
Scanning dependencies of target jvdmtx
[ 50%] Building C object CMakeFiles/jvdmtx.dir/lab/itti/jevois/software/jevoisextra/Contrib/libdmtx/dmtx.c.o
In file included from /lab/itti/jevois/software/jevoisextra/Contrib/libdmtx/dmtx.c:71:0:
/lab/itti/jevois/software/jevoisextra/Contrib/libdmtx/dmtxdecode.c: In function ‘dmtxDecodeCreateDiagnostic’:
/lab/itti/jevois/software/jevoisextra/Contrib/libdmtx/dmtxdecode.c:492:84: warning: parameter ‘style’ set but not used [-Wunused-but-set-parameter]
 dmtxDecodeCreateDiagnostic(DmtxDecode *dec, int *totalBytes, int *headerBytes, int style)
                                                                                    ^~~~~
In file included from /lab/itti/jevois/software/jevoisextra/Contrib/libdmtx/dmtx.c:78:0:
/lab/itti/jevois/software/jevoisextra/Contrib/libdmtx/dmtxreedsol.c: In function ‘RsDecode’:
/lab/itti/jevois/software/jevoisextra/Contrib/libdmtx/dmtxreedsol.c:151:48: warning: unused parameter ‘fix’ [-Wunused-parameter]
 RsDecode(unsigned char *code, int sizeIdx, int fix)
                                                ^~~
In file included from /lab/itti/jevois/software/jevoisextra/Contrib/libdmtx/dmtx.c:83:0:
/lab/itti/jevois/software/jevoisextra/Contrib/libdmtx/dmtxtime.c: In function ‘dmtxTimeNow’:
/lab/itti/jevois/software/jevoisextra/Contrib/libdmtx/dmtxtime.c:92:7: warning: suggest braces around empty body in an ‘if’ statement [-Wempty-body]
       ; /* XXX handle error better here */
       ^
[100%] Linking C shared library libjvdmtx.so
[100%] Built target jvdmtx
[100%] Built target jvdmtx
Install the project...
-- Install configuration: ""
-- Installing: /usr/lib/libjvdmtx.so.1.0.0
-- Installing: /usr/lib/libjvdmtx.so
-- Installing: /usr/share/doc/libjvdmtx-host/README
-- Installing: /usr/share/doc/libjvdmtx-host/INSTALL
-- Installing: /usr/share/doc/libjvdmtx-host/COPYING
\endverbatim

一切运行正常（只有几个警告），最后我们得到了 \b /usr/lib/libjvdmtx.so ，稍后我们会对其进行链接。

现在针对平台：

\verbatim
itti@iLab0:~/jevoisextra/libjvdmtx$ ./rebuild-platform.sh
-- JeVois version 1.11.0
-- JEVOIS_PLATFORM: ON
-- JEVOIS_VENDOR: JeVois
-- JeVois microSD card mount point: /media/itti/JEVOIS
-- JeVois serial-over-USB device: /dev/ttyACM0
-- Install prefix for executable programs: /var/lib/jevois-build/usr
-- Host path to jevois modules root: /var/lib/jevois-microsd
-- The C compiler identification is GNU 7.2.0
-- Check for working C compiler: /lab/itti/jevois/software/jevois-sdk/out/sun8iw5p1/linux/common/buildroot/host/usr/bin/arm-buildroot-linux-gnueabihf-gcc
-- Check for working C compiler: /lab/itti/jevois/software/jevois-sdk/out/sun8iw5p1/linux/common/buildroot/host/usr/bin/arm-buildroot-linux-gnueabihf-gcc -- works
-- Detecting C compiler ABI info
-- Detecting C compiler ABI info - done
-- Detecting C compile features
-- Detecting C compile features - done
-- JeVois SDK root: /lab/itti/jevois/software/jevois-sdk
-- Host path to jevois lib and data install root: /var/lib/jevois-microsd
-- Configuring done
-- Generating done
-- Build files have been written to: /lab/itti/jevois/software/jevoisextra/libjvdmtx/pbuild
Scanning dependencies of target jvdmtx
[ 50%] Building C object CMakeFiles/jvdmtx.dir/lab/itti/jevois/software/jevoisextra/Contrib/libdmtx/dmtx.c.o
In file included from /lab/itti/jevois/software/jevoisextra/Contrib/libdmtx/dmtx.c:71:0:
/lab/itti/jevois/software/jevoisextra/Contrib/libdmtx/dmtxdecode.c: In function ‘dmtxDecodeCreateDiagnostic’:
/lab/itti/jevois/software/jevoisextra/Contrib/libdmtx/dmtxdecode.c:492:84: warning: parameter ‘style’ set but not used [-Wunused-but-set-parameter]
 dmtxDecodeCreateDiagnostic(DmtxDecode *dec, int *totalBytes, int *headerBytes, int style)
                                                                                    ^~~~~
In file included from /lab/itti/jevois/software/jevoisextra/Contrib/libdmtx/dmtx.c:78:0:
/lab/itti/jevois/software/jevoisextra/Contrib/libdmtx/dmtxreedsol.c: In function ‘RsDecode’:
/lab/itti/jevois/software/jevoisextra/Contrib/libdmtx/dmtxreedsol.c:151:48: warning: unused parameter ‘fix’ [-Wunused-parameter]
 RsDecode(unsigned char *code, int sizeIdx, int fix)
                                                ^~~
In file included from /lab/itti/jevois/software/jevoisextra/Contrib/libdmtx/dmtx.c:83:0:
/lab/itti/jevois/software/jevoisextra/Contrib/libdmtx/dmtxtime.c: In function ‘dmtxTimeNow’:
/lab/itti/jevois/software/jevoisextra/Contrib/libdmtx/dmtxtime.c:92:7: warning: suggest braces around empty body in an ‘if’ statement [-Wempty-body]
       ; /* XXX handle error better here */
       ^
[100%] Linking C shared library libjvdmtx.so
[100%] Built target jvdmtx
[100%] Built target jvdmtx
Install the project...
-- Install configuration: ""
-- Installing: /var/lib/jevois-microsd/lib/JeVois/libjvdmtx.so
-- Set runtime path of "/var/lib/jevois-microsd/lib/JeVois/libjvdmtx.so" to ""
-- Installing: /var/lib/jevois-build/usr/share/doc/libjvdmtx-platform/README
-- Installing: /var/lib/jevois-build/usr/share/doc/libjvdmtx-platform/INSTALL
-- Installing: /var/lib/jevois-build/usr/share/doc/libjvdmtx-platform/COPYING
\endverbatim

同样的警告，我们最终得到为 ARM 交叉编译的 \b /var/lib/jevois-microsd/lib/JeVois/libjvdmtx.so。


\note 理想情况下，我们还应该将 \b dmtx.h 安装在某个地方，例如 \b /usr/include ，以便想要使用该库的代码可以轻松找到它。我们尚未完全弄清楚这一部分，因此目前库的用户必须

*/

